{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "suffix": {
            "type": "String",
			"defaultValue": "[uniqueString(resourceGroup().id)]",
            "metadata": {
                "description": "Suffix which will be added to the name of the resources to make them unique"
            }
        },
		"AdminUser": {
		  "type": "string",
		  "defaultValue": "sqladminuser",
		  "metadata": {
			"description": "Admin user"
		  }
		},
		 "AdminPassword": {
		  "type": "securestring",
		  "metadata": {
			"description": "Admin password"
		  }
		}
    },
	"variables": {
		"factoryName": "[concat('datafactory-module1-', parameters('suffix'))]",
        "factoryId": "[concat('Microsoft.DataFactory/factories/', 'datafactory-module1-', parameters('suffix'))]"
    },
	"resources": [
    {
				"type": "Microsoft.DocumentDB/databaseAccounts",
				"apiVersion": "2022-05-15",
				"name": "[concat('cosmosdb-module1-', parameters('suffix'))]",
				"location": "[resourceGroup().location]",
				"kind": "GlobalDocumentDB",
				"properties": {
					"databaseAccountOfferType": "Standard",
					"locations": [
					  {
						"locationName": "[resourceGroup().location]",
						"failoverPriority": 0,
						"isZoneRedundant": false
					  }
					],
					"capabilities": [
						{
							"name": "EnableServerless"
						}
					]
				}
			},
			{
				"type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
				"apiVersion": "2022-05-15",
				"name": "[concat('cosmosdb-module1-', parameters('suffix'), '/Address')]",
				"properties": {
					"resource": {
					  "id": "Address"
					}
				  },
				  "dependsOn": [
					"[resourceId('Microsoft.DocumentDB/databaseAccounts', concat('cosmosdb-module1-', parameters('suffix')))]"
				  ]
			},
			{
			  "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
			  "apiVersion": "2022-05-15",
			  "name": "[concat('cosmosdb-module1-', parameters('suffix'), '/Address/Address')]",
			  "properties": {
				"resource": {
				  "id": "Address",
				  "partitionKey": {
					"paths": [
					  "/PostalCode"
					]
				  }			  
				}
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.DocumentDB/databaseAccounts', concat('cosmosdb-module1-', parameters('suffix')))]",
				"[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', concat('cosmosdb-module1-', parameters('suffix')), 'Address')]"
			  ]
			},
			{
				"type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
				"apiVersion": "2022-05-15",
				"name": "[concat('cosmosdb-module1-', parameters('suffix'), '/ToDoList')]",
				"properties": {
					"resource": {
					  "id": "ToDoList"
					}
				  },
				  "dependsOn": [
					"[resourceId('Microsoft.DocumentDB/databaseAccounts', concat('cosmosdb-module1-', parameters('suffix')))]"
				  ]
			},
			{
			  "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
			  "apiVersion": "2022-05-15",
			  "name": "[concat('cosmosdb-module1-', parameters('suffix'), '/ToDoList/Items')]",
			  "properties": {
				"resource": {
				  "id": "Items",
				  "partitionKey": {
					"paths": [
					  "/partitionKey"
					]
				  }			  
				}
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.DocumentDB/databaseAccounts', concat('cosmosdb-module1-', parameters('suffix')))]",
				"[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', concat('cosmosdb-module1-', parameters('suffix')), 'ToDoList')]"
			  ]
			},
			{
			  "type": "Microsoft.Storage/storageAccounts",
			  "apiVersion": "2022-09-01",
			  "name": "[concat('storageaccountmodule1', parameters('suffix'))]",
			  "sku": {
				"name": "Standard_LRS"
			  },
			  "kind": "StorageV2",
			  "location": "[resourceGroup().location]",

			  "properties": {
				"isHnsEnabled": true
			  }
			},
			{
			  "type": "Microsoft.Storage/storageAccounts/blobServices",
			  "apiVersion": "2022-09-01",
			  "name": "[concat('storageaccountmodule1', parameters('suffix'), '/default')]",
			  "dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', concat('storageaccountmodule1', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
			  "apiVersion": "2022-09-01",
			  "name": "[concat('storageaccountmodule1', parameters('suffix'), '/default/hrfiles')]",
			  "dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts/blobServices', concat('storageaccountmodule1', parameters('suffix')), 'default')]",
				"[resourceId('Microsoft.Storage/storageAccounts', concat('storageaccountmodule1', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
			  "apiVersion": "2022-09-01",
			  "name": "[concat('storageaccountmodule1', parameters('suffix'), '/default/trainees')]",
			  "dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts/blobServices', concat('storageaccountmodule1', parameters('suffix')), 'default')]",
				"[resourceId('Microsoft.Storage/storageAccounts', concat('storageaccountmodule1', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
			  "apiVersion": "2022-09-01",
			  "name": "[concat('storageaccountmodule1', parameters('suffix'), '/default/adventureworks')]",
			  "dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts/blobServices', concat('storageaccountmodule1', parameters('suffix')), 'default')]",
				"[resourceId('Microsoft.Storage/storageAccounts', concat('storageaccountmodule1', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.Sql/servers",
			  "apiVersion": "2022-05-01-preview",
			  "name": "[concat('dataprime-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "properties": {
				"administratorLogin": "[parameters('AdminUser')]",
				"administratorLoginPassword": "[parameters('AdminPassword')]"
			  }
			},
			{
				"type": "Microsoft.Sql/servers/firewallRules",
				"apiVersion": "2023-02-01-preview",
				"name": "[concat('dataprime-', parameters('suffix'), '/AllowAllWindowsAzureIps')]",
				"location": "[resourceGroup().location]",
				"properties": {
					"startIpAddress": "0.0.0.0",
					"endIpAddress": "0.0.0.0"
                    },
				"dependsOn": [
					"[resourceId('Microsoft.Sql/servers', concat('dataprime-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.Sql/servers/databases",
			  "apiVersion": "2022-05-01-preview",
			  "name": "[concat('dataprime-', parameters('suffix'), '/AdventureWorks')]",
			  "location": "[resourceGroup().location]",
			  "sku": {
				"capacity": 5,
				"name": "Basic",
				"tier": "Basic"
			  },
			  "properties": {
				  "sampleName": "AdventureWorksLT"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.Sql/servers', concat('dataprime-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.Sql/servers/databases",
			  "apiVersion": "2022-05-01-preview",
			  "name": "[concat('dataprime-', parameters('suffix'), '/metadata')]",
			  "location": "[resourceGroup().location]",
			  "sku": {
				"capacity": 5,
				"name": "Basic",
				"tier": "Basic"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.Sql/servers', concat('dataprime-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.Network/networkSecurityGroups",
			  "apiVersion": "2022-01-01",
			  "name": "[concat('sqlvm-nsg-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]"
			},
			{
			  "type": "Microsoft.Network/virtualNetworks",
			  "apiVersion": "2021-02-01",
			  "name": "[concat('sqlvm-vnet-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "properties": {
				  "addressSpace": {
						"addressPrefixes": [
							"10.0.0.0/16"
						]
					},
				  "subnets": [
						{
							"name": "default",
							"id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat('sqlvm-vnet-', parameters('suffix')), 'default')]",
							"properties": {
								"addressPrefix": "10.0.0.0/24",
								"networkSecurityGroup": {
									"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('sqlvm-nsg-', parameters('suffix')))]"
								}
							},
							"type": "Microsoft.Network/virtualNetworks/subnets"
						}
					]
			  },
			  "dependsOn": [
					"[resourceId('Microsoft.Network/networkSecurityGroups', concat('sqlvm-nsg-', parameters('suffix')))]"
				]
			},
			{
				"type": "Microsoft.Network/virtualNetworks/subnets",
				"apiVersion": "2023-05-01",
				"name": "[concat('sqlvm-vnet-', parameters('suffix'), '/default')]",
				"properties": {
					"addressPrefix": "10.0.0.0/24",
					"networkSecurityGroup": {
						"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('sqlvm-nsg-', parameters('suffix')))]"
					}
				},
				"dependsOn": [
					"[resourceId('Microsoft.Network/virtualNetworks', concat('sqlvm-vnet-', parameters('suffix')))]",
					"[resourceId('Microsoft.Network/networkSecurityGroups', concat('sqlvm-nsg-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.Network/publicIPAddresses",
			  "apiVersion": "2022-01-01",
			  "name": "[concat('sqlvm-ip-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "sku": {
				"name": "Standard"
			  },
			  "properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
                    "domainNameLabel": "[concat('sqlvm-', parameters('suffix'))]",
                    "fqdn": "[concat('sqlvm-', parameters('suffix'), '.westeurope.cloudapp.azure.com')]"
                },
			  }
			},
			{
			  "type": "Microsoft.Network/networkInterfaces",
			  "apiVersion": "2022-01-01",
			  "name": "[concat('sqlvm-ni-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "properties": {
				"ipConfigurations": [
				  {
					"name": "ipconfig1",
					"properties": {
					  "subnet": {
						"id": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetWorks/subnets', concat('sqlvm-vnet-', parameters('suffix')), 'default')]"
					  },
					  "privateIPAllocationMethod": "Dynamic",
					  "publicIPAddress": {
						"id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('sqlvm-ip-', parameters('suffix')))]"
					  }
					}
				  }
				],
				"enableAcceleratedNetworking": true,
				"networkSecurityGroup": {
				  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('sqlvm-nsg-', parameters('suffix')))]"
				}
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', concat('sqlvm-nsg-', parameters('suffix')))]",
				"[resourceId('Microsoft.Network/publicIPAddresses', concat('sqlvm-ip-', parameters('suffix')))]",
				"[resourceId('Microsoft.Network/virtualNetWorks/subnets', concat('sqlvm-vnet-', parameters('suffix')), 'default')]"
			  ]
			},
			{
			  "type": "Microsoft.Compute/virtualMachines",
			  "apiVersion": "2023-03-01",
			  "name": "[concat('sqlvm-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "properties": {
                "hardwareProfile": {
                    "vmSize": "Standard_D16ds_v4"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "microsoftsqlserver",
                        "offer": "sql2022-ws2022",
                        "sku": "sqldev-gen2",
                        "version": "latest"
                    }
                },
                "licenseType": "Windows_Server",
				"networkProfile": {
					"networkInterfaces": [
					{
					  "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('sqlvm-ni-', parameters('suffix')))]"
					}
				  ]
				},
				 "osProfile": {
					 "computerName": "[concat('sqlvm-', parameters('suffix'))]",
					  "adminUsername": "[parameters('AdminUser')]",
					  "adminPassword": "[parameters('AdminPassword')]"
				 }
				},
				"dependsOn": [
					"[resourceId('Microsoft.Network/networkInterfaces', concat('sqlvm-ni-', parameters('suffix')))]"
				  ]
			},
			{
			  "type": "Microsoft.SqlVirtualMachine/sqlVirtualMachines",
			  "apiVersion": "2022-08-01-preview",
			  "name": "[concat('sqlvm-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "properties": {
				  "sqlImageOffer": "SQL2022-WS2022",
				  "sqlImageSku": "Developer",
				  "virtualMachineResourceId":"[resourceId('Microsoft.Compute/virtualMachines', concat('sqlvm-', parameters('suffix')))]",
				  "ServerConfigurationsManagementSettings": {
                    "SQLConnectivityUpdateSettings": {
                        "ConnectivityType": "Private",
                        "Port": "1433",
                        "SQLAuthUpdateUserName": "[parameters('AdminUser')]",
                        "SQLAuthUpdatePassword": "[parameters('AdminPassword')]"
                    }
                }
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.Compute/virtualMachines', concat('sqlvm-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.Storage/storageAccounts",
			  "apiVersion": "2022-09-01",
			  "name": "[concat('appstorage', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "kind": "StorageV2",
			  "sku": {
				"name": "Standard_LRS"
			  }
			},
			{
			  "type": "Microsoft.Web/serverfarms",
			  "apiVersion": "2022-03-01",
			  "name": "[concat('ASP-dataprimetrainingmodule1-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "properties": {
				"computeMode": "Dynamic"
			  },
			  "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 0
				}
			},
			{
			  "type": "Microsoft.Insights/components",
			  "apiVersion": "2020-02-02",
			  "name": "[concat('dataprime-module1-cosmosauth-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "tags": {
				"[format('hidden-link:{0}', resourceId('Microsoft.Web/sites', concat('dataprime-module1-cosmosauth-', parameters('suffix'))))]": "Resource"
			  },
			  "properties": {
				"Application_Type": "web"
			  },
			  "kind": "web"
			},
			{
			  "type": "Microsoft.Web/sites",
			  "apiVersion": "2022-03-01",
			  "name": "[concat('dataprime-module1-cosmosauth-', parameters('suffix'))]",
			  "kind": "functionapp",
			  "location": "[resourceGroup().location]",
			  "properties": {
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', concat('ASP-dataprimetrainingmodule1-', parameters('suffix')))]",
				"siteConfig": {
				  "appSettings": [
					{
					  "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
					  "value": "[reference(resourceId('Microsoft.Insights/components', concat('dataprime-module1-cosmosauth-', parameters('suffix'))), '2020-02-02').InstrumentationKey]"
					},
					{
					  "name": "AzureWebJobsStorage",
					  "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', concat('appstorage', parameters('suffix')), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', concat('appstorage', parameters('suffix'))), '2021-09-01').keys[0].value)]"
					},
					{
					  "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
					  "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', concat('appstorage', parameters('suffix')), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', concat('appstorage', parameters('suffix'))), '2021-09-01').keys[0].value)]"
					},
					{
					  "name": "WEBSITE_CONTENTSHARE",
					  "value": "[concat('dataprime-module1-cosmosauth-', parameters('suffix'))]"
					},
					{
					  "name": "FUNCTIONS_EXTENSION_VERSION",
					  "value": "~4"
					},
					{
					  "name": "FUNCTIONS_WORKER_RUNTIME",
					  "value": "dotnet"
					},
					{
					  "name": "WEBSITE_NODE_DEFAULT_VERSION",
					  "value": "~14"
					}
				  ]
				}
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.Web/serverfarms', concat('ASP-dataprimetrainingmodule1-', parameters('suffix')))]",
				"[resourceId('Microsoft.Storage/storageAccounts', concat('appstorage', parameters('suffix')))]",
				"[resourceId('Microsoft.Insights/components', concat('dataprime-module1-cosmosauth-', parameters('suffix')))]"
			  ]
			},
			{
			  "type": "Microsoft.DataFactory/factories",
			  "apiVersion": "2018-06-01",
			  "name": "[concat('datafactory-module1-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "identity": {
				"type": "SystemAssigned"
			  },
			  "properties": {}
			},
			{
			  "type": "Microsoft.KeyVault/vaults",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'))]",
			  "location": "[resourceGroup().location]",
			  "properties": {
				"tenantId": "[subscription().tenantId]",
				"accessPolicies": [
					{
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[reference(concat('Microsoft.DataFactory/factories/', concat('datafactory-module1-', parameters('suffix'))), '2018-06-01', 'Full').identity.principalId]",
                        "permissions": {
                            "certificates": [],
                            "keys": [],
                            "secrets": [
                                "get",
                                "list",
                                "set"
                            ]
                        }
                    }
				],
				"sku": {
				  "name": "Standard",
				  "family": "A"
				}
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.DataFactory/factories', concat('datafactory-module1-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.KeyVault/vaults/secrets",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'), '/ADLSKey')]",
			  "properties": {
				"value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', concat('storageaccountmodule1', parameters('suffix'))), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]",
				"[resourceId('Microsoft.Storage/storageAccounts', concat('storageaccountmodule1', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.KeyVault/vaults/secrets",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'), '/AdventureWorksDBAdminUser')]",
			  "properties": {
				"value": "[parameters('AdminUser')]"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.KeyVault/vaults/secrets",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'), '/sqlvmadminpassword')]",
			  "properties": {
				"value": "[parameters('AdminPassword')]"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.KeyVault/vaults/secrets",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'), '/sqlvmadminusername')]",
			  "properties": {
				"value": "[parameters('AdminUser')]"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.KeyVault/vaults/secrets",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'), '/VMAdventureWorksDBAdminUser')]",
			  "properties": {
				"value": "[parameters('AdminUser')]"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.KeyVault/vaults/secrets",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'), '/FunctionKey')]",
			  "properties": {
				"value": "[listkeys(concat(resourceId('Microsoft.Web/sites', concat('dataprime-module1-cosmosauth-', parameters('suffix'))), '/host/default/'),'2016-08-01').functionKeys.default]"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]",
				"[resourceId('Microsoft.Web/sites', concat('dataprime-module1-cosmosauth-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.KeyVault/vaults/secrets",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'), '/SQLAdventureWorksConnectionString')]",
			  "properties": {
				"value": "[concat('Server=tcp:dataprime-', parameters('suffix'), '.database.windows.net,1433;Initial Catalog=AdventureWorks;Persist Security Info=False;User ID=', parameters('AdminUser'), ';Password=', parameters('AdminPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.KeyVault/vaults/secrets",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'), '/SQLMetadataConnectionString')]",
			  "properties": {
				"value": "[concat('Server=tcp:dataprime-', parameters('suffix'), '.database.windows.net,1433;Initial Catalog=AdventureWorks;Persist Security Info=False;User ID=', parameters('AdminUser'), ';Password=', parameters('AdminPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]"
				]
			},
			{
			  "type": "Microsoft.KeyVault/vaults/secrets",
			  "apiVersion": "2021-11-01-preview",
			  "name": "[concat('module1-kv-', parameters('suffix'), '/sqlvmAdventureWorksConnectionString')]",
			  "properties": {
				"value": "[concat('integrated security=False;data source=sqlvm-', parameters('suffix'), ';initial catalog=AdventureWorks;user id=', parameters('AdminUser'), ';Password=', parameters('AdminPassword'), ';')]"
			  },
			  "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]"
				]
			},
			{
            "name": "[concat(variables('factoryName'), '/SqlServerOnVM')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "SelfHosted",
                "typeProperties": {}
            },
            "dependsOn": [
				"[variables('factoryId')]"
			]
        },
        {
            "name": "[concat(variables('factoryName'), '/RestServiceCosmos')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[concat('https://cosmosdb-module1-', parameters('suffix'), '.documents.azure.com/')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": [
				"[variables('factoryId')]"
			]
        },
        {
            "name": "[concat(variables('factoryName'), '/AzureFunction')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureFunction",
                "typeProperties": {
                    "functionAppUrl": "[concat('https://dataprime-module1-cosmosauth-', parameters('suffix'), '.azurewebsites.net')]",
                    "functionKey": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "AzureKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "FunctionKey"
                    },
                    "authentication": "Anonymous"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/metadataDB')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "AzureKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "SQLMetadataConnectionString"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/AzureSQLDBAdventureWorks')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "AzureKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "SQLAdventureWorksConnectionString"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/ADLS')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[concat('https://storageaccountmodule1', parameters('suffix'), '.dfs.core.windows.net/')]",
                    "accountKey": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "AzureKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "ADLSKey"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/SqlServerOnVM')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "AzureKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "sqlvmAdventureWorksConnectionString"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/SqlServerOnVM')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/AzureKeyVault')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureKeyVault",
                "typeProperties": {
                    "baseUrl": "[concat('https://module1-kv-', parameters('suffix'), '.vault.azure.net/')]"
                }
            },
            "dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', concat('module1-kv-', parameters('suffix')))]"
			]
        },
        {
            "name": "[concat(variables('factoryName'), '/ADLSPipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy_HR",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [
                            {
                                "name": "Source",
                                "value": "hrfiles//"
                            },
                            {
                                "name": "Destination",
                                "value": "batu/raw/hr/"
                            }
                        ],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings",
                                    "skipLineCount": 0
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "validateDataConsistency": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SourceDataset_HR",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DestinationDataset_HR",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "Demo"
                },
                "annotations": [],
                "lastPublishTime": "2023-09-21T14:35:21Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/SourceDataset_HR')]",
                "[concat(variables('factoryId'), '/datasets/DestinationDataset_HR')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/APIPipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Set Date",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Set Auth",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "x-ms-date",
                            "value": {
                                "value": "@split(string(activity('GetAPIHeaders').output.Response),'-')[1]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set Auth",
                        "description": "",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetAPIHeaders",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "authorization",
                            "value": {
                                "value": "@split(string(activity('GetAPIHeaders').output.Response),'-')[0]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Copy from API",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set Date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "01:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "x-ms-documentdb-isquery": "True",
                                    "x-ms-version": "2015-08-06",
                                    "x-ms-date": {
                                        "value": "@variables('x-ms-date')",
                                        "type": "Expression"
                                    },
                                    "x-ms-query-enable-crosspartition": "True",
                                    "Content-Length": "0",
                                    "authorization": {
                                        "value": "@variables('authorization')",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "[['AddressID']"
                                        },
                                        "sink": {
                                            "path": "AdressID"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['AddressLine1']"
                                        },
                                        "sink": {
                                            "path": "AddressLine1"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['AddressLine2']"
                                        },
                                        "sink": {
                                            "path": "AddressLine2"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['City']"
                                        },
                                        "sink": {
                                            "path": "City"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['StateProvinceID']"
                                        },
                                        "sink": {
                                            "path": "StateProvinceID"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['PostalCode']"
                                        },
                                        "sink": {
                                            "path": "PostalCode"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['SpatialLocation']"
                                        },
                                        "sink": {
                                            "path": "SpatialLocation"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['rowguid']"
                                        },
                                        "sink": {
                                            "path": "rowguid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['ModifiedDate']"
                                        },
                                        "sink": {
                                            "path": "ModifiedDate"
                                        }
                                    }
                                ],
                                "collectionReference": "$['Documents']"
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "RestResource",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "AddressJson",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "GetAPIHeaders",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "CosmosAuth",
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "name": "Azure"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureFunction",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "variables": {
                    "x-ms-date": {
                        "type": "String"
                    },
                    "authorization": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Demo"
                },
                "annotations": [],
                "lastPublishTime": "2023-09-21T14:35:21Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource')]",
                "[concat(variables('factoryId'), '/datasets/AddressJson')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureFunction')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForProduct_adz_BottomLevel')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
                "activities": [
                    {
                        "name": "ListObjectsFromOneGroup",
                        "description": "List objects from one group and iterate each of them to downstream activities",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.ObjectsPerGroupToCopy",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "RouteJobsBasedOnLoadingBehavior",
                                    "description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "FullLoad",
                                                "activities": [
                                                    {
                                                        "name": "FullLoadOneObject",
                                                        "description": "Take a full snapshot on this object and copy it to the destination",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [
                                                            {
                                                                "name": "Source",
                                                                "value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
                                                            },
                                                            {
                                                                "name": "Destination",
                                                                "value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
                                                            }
                                                        ],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "AzureSqlSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "@json(item().CopySourceSettings).sqlReaderQuery",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionOption": {
                                                                    "value": "@json(item().CopySourceSettings).partitionOption",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionSettings": {
                                                                    "partitionColumnName": {
                                                                        "value": "@json(item().CopySourceSettings).partitionColumnName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionUpperBound": {
                                                                        "value": "@json(item().CopySourceSettings).partitionUpperBound",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionLowerBound": {
                                                                        "value": "@json(item().CopySourceSettings).partitionLowerBound",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionNames": "@json(item().CopySourceSettings).partitionNames"
                                                                }
                                                            },
                                                            "sink": {
                                                                "type": "DelimitedTextSink",
                                                                "storeSettings": {
                                                                    "type": "AzureBlobFSWriteSettings"
                                                                },
                                                                "formatSettings": {
                                                                    "type": "DelimitedTextWriteSettings",
                                                                    "quoteAllText": true,
                                                                    "fileExtension": ".txt"
                                                                }
                                                            },
                                                            "enableStaging": false,
                                                            "validateDataConsistency": false,
                                                            "translator": {
                                                                "value": "@json(item().CopyActivitySettings).translator",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "MetadataDrivenCopyTaskForProduct_adz_SourceDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_schema": {
                                                                        "value": "@json(item().SourceObjectSettings).schema",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_table": {
                                                                        "value": "@json(item().SourceObjectSettings).table",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "MetadataDrivenCopyTaskForProduct_adz_DestinationDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_columnDelimiter": {
                                                                        "value": "@json(item().SinkObjectSettings).columnDelimiter",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_escapeChar": {
                                                                        "value": "@json(item().SinkObjectSettings).escapeChar",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_quoteChar": {
                                                                        "value": "@json(item().SinkObjectSettings).quoteChar",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_firstRowAsHeader": {
                                                                        "value": "@json(item().SinkObjectSettings).firstRowAsHeader",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_fileName": {
                                                                        "value": "@json(item().SinkObjectSettings).fileName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_folderPath": {
                                                                        "value": "@json(item().SinkObjectSettings).folderPath",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_fileSystem": {
                                                                        "value": "@json(item().SinkObjectSettings).fileSystem",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "DeltaLoad",
                                                "activities": [
                                                    {
                                                        "name": "GetMaxWatermarkValue",
                                                        "description": "Query the source object to get the max value from watermark column",
                                                        "type": "Lookup",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "AzureSqlSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "select max([@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}]) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionOption": "None"
                                                            },
                                                            "dataset": {
                                                                "referenceName": "MetadataDrivenCopyTaskForProduct_adz_SourceDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_schema": {
                                                                        "value": "@json(item().SourceObjectSettings).schema",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_table": {
                                                                        "value": "@json(item().SourceObjectSettings).table",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "DeltaLoadOneObject",
                                                        "description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
                                                        "type": "Copy",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "GetMaxWatermarkValue",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [
                                                            {
                                                                "name": "Source",
                                                                "value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
                                                            },
                                                            {
                                                                "name": "Destination",
                                                                "value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
                                                            }
                                                        ],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "AzureSqlSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}] \n    where [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] > @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, \n    concat('''', json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, ''''))}\n    and [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] <= @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, \n    concat('''', activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, ''''))}",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionOption": {
                                                                    "value": "@json(item().CopySourceSettings).partitionOption",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionSettings": {
                                                                    "partitionColumnName": {
                                                                        "value": "@json(item().CopySourceSettings).partitionColumnName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionUpperBound": {
                                                                        "value": "@json(item().CopySourceSettings).partitionUpperBound",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionLowerBound": {
                                                                        "value": "@json(item().CopySourceSettings).partitionLowerBound",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionNames": "@json(item().CopySourceSettings).partitionNames"
                                                                }
                                                            },
                                                            "sink": {
                                                                "type": "DelimitedTextSink",
                                                                "storeSettings": {
                                                                    "type": "AzureBlobFSWriteSettings"
                                                                },
                                                                "formatSettings": {
                                                                    "type": "DelimitedTextWriteSettings",
                                                                    "quoteAllText": true,
                                                                    "fileExtension": ".txt"
                                                                }
                                                            },
                                                            "enableStaging": false,
                                                            "validateDataConsistency": false,
                                                            "translator": {
                                                                "value": "@json(item().CopyActivitySettings).translator",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "MetadataDrivenCopyTaskForProduct_adz_SourceDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_schema": {
                                                                        "value": "@json(item().SourceObjectSettings).schema",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_table": {
                                                                        "value": "@json(item().SourceObjectSettings).table",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "MetadataDrivenCopyTaskForProduct_adz_DestinationDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_columnDelimiter": {
                                                                        "value": "@json(item().SinkObjectSettings).columnDelimiter",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_escapeChar": {
                                                                        "value": "@json(item().SinkObjectSettings).escapeChar",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_quoteChar": {
                                                                        "value": "@json(item().SinkObjectSettings).quoteChar",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_firstRowAsHeader": {
                                                                        "value": "@json(item().SinkObjectSettings).firstRowAsHeader",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_fileName": {
                                                                        "value": "@{json(item().SinkObjectSettings).fileName}-@{json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue}-@{activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue}",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_folderPath": {
                                                                        "value": "@json(item().SinkObjectSettings).folderPath",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_fileSystem": {
                                                                        "value": "@json(item().SinkObjectSettings).fileSystem",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "name": "UpdateWatermarkColumnValue",
                                                        "type": "SqlServerStoredProcedure",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "DeltaLoadOneObject",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "storedProcedureName": "[[control].[UpdateWatermarkColumnValue_adz]",
                                                            "storedProcedureParameters": {
                                                                "Id": {
                                                                    "value": {
                                                                        "value": "@item().Id",
                                                                        "type": "Expression"
                                                                    },
                                                                    "type": "Int32"
                                                                },
                                                                "watermarkColumnStartValue": {
                                                                    "value": {
                                                                        "value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
                                                                        "type": "Expression"
                                                                    },
                                                                    "type": "String"
                                                                }
                                                            }
                                                        },
                                                        "linkedServiceName": {
                                                            "referenceName": "metadataDB",
                                                            "type": "LinkedServiceReference"
                                                        }
                                                    }
                                                ]
                                            }
                                        ],
                                        "defaultActivities": [
                                            {
                                                "name": "DefaultFullLoadOneObject",
                                                "description": "Take a full snapshot on this object and copy it to the destination",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [
                                                    {
                                                        "name": "Source",
                                                        "value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
                                                    },
                                                    {
                                                        "name": "Destination",
                                                        "value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
                                                    }
                                                ],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "@json(item().CopySourceSettings).sqlReaderQuery",
                                                            "type": "Expression"
                                                        },
                                                        "partitionOption": {
                                                            "value": "@json(item().CopySourceSettings).partitionOption",
                                                            "type": "Expression"
                                                        },
                                                        "partitionSettings": {
                                                            "partitionColumnName": {
                                                                "value": "@json(item().CopySourceSettings).partitionColumnName",
                                                                "type": "Expression"
                                                            },
                                                            "partitionUpperBound": {
                                                                "value": "@json(item().CopySourceSettings).partitionUpperBound",
                                                                "type": "Expression"
                                                            },
                                                            "partitionLowerBound": {
                                                                "value": "@json(item().CopySourceSettings).partitionLowerBound",
                                                                "type": "Expression"
                                                            },
                                                            "partitionNames": "@json(item().CopySourceSettings).partitionNames"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "validateDataConsistency": false,
                                                    "translator": {
                                                        "value": "@json(item().CopyActivitySettings).translator",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "MetadataDrivenCopyTaskForProduct_adz_SourceDS",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "cw_schema": {
                                                                "value": "@json(item().SourceObjectSettings).schema",
                                                                "type": "Expression"
                                                            },
                                                            "cw_table": {
                                                                "value": "@json(item().SourceObjectSettings).table",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "MetadataDrivenCopyTaskForProduct_adz_DestinationDS",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "cw_columnDelimiter": {
                                                                "value": "@json(item().SinkObjectSettings).columnDelimiter",
                                                                "type": "Expression"
                                                            },
                                                            "cw_escapeChar": {
                                                                "value": "@json(item().SinkObjectSettings).escapeChar",
                                                                "type": "Expression"
                                                            },
                                                            "cw_quoteChar": {
                                                                "value": "@json(item().SinkObjectSettings).quoteChar",
                                                                "type": "Expression"
                                                            },
                                                            "cw_firstRowAsHeader": {
                                                                "value": "@json(item().SinkObjectSettings).firstRowAsHeader",
                                                                "type": "Expression"
                                                            },
                                                            "cw_fileName": {
                                                                "value": "@json(item().SinkObjectSettings).fileName",
                                                                "type": "Expression"
                                                            },
                                                            "cw_folderPath": {
                                                                "value": "@json(item().SinkObjectSettings).folderPath",
                                                                "type": "Expression"
                                                            },
                                                            "cw_fileSystem": {
                                                                "value": "@json(item().SinkObjectSettings).fileSystem",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "ObjectsPerGroupToCopy": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Demo/MetadataDrivenCopyTaskForProduct_adz_20230119"
                },
                "annotations": [],
                "lastPublishTime": "2023-09-21T14:35:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTaskForProduct_adz_SourceDS')]",
                "[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTaskForProduct_adz_DestinationDS')]",
                "[concat(variables('factoryId'), '/linkedServices/metadataDB')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForProduct_adz_MiddleLevel')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
                "activities": [
                    {
                        "name": "DivideOneBatchIntoMultipleGroups",
                        "description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 50,
                            "activities": [
                                {
                                    "name": "GetObjectsPerGroupToCopy",
                                    "description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "MetadataDrivenCopyTaskForProduct_adz_ControlDS",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "CopyObjectsInOneGroup",
                                    "description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "GetObjectsPerGroupToCopy",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "MetadataDrivenCopyTaskForProduct_adz_BottomLevel",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "ObjectsPerGroupToCopy": {
                                                "value": "@activity('GetObjectsPerGroupToCopy').output.value",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "MaxNumberOfObjectsReturnedFromLookupActivity": {
                        "type": "Int"
                    },
                    "TopLevelPipelineName": {
                        "type": "String"
                    },
                    "TriggerName": {
                        "type": "String"
                    },
                    "CurrentSequentialNumberOfBatch": {
                        "type": "Int"
                    },
                    "SumOfObjectsToCopy": {
                        "type": "Int"
                    },
                    "SumOfObjectsToCopyForCurrentBatch": {
                        "type": "Int"
                    },
                    "MainControlTableName": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Demo/MetadataDrivenCopyTaskForProduct_adz_20230119"
                },
                "annotations": [],
                "lastPublishTime": "2023-09-21T14:35:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTaskForProduct_adz_ControlDS')]",
                "[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTaskForProduct_adz_BottomLevel')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForProduct_adz_TopLevel')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
                "activities": [
                    {
                        "name": "GetSumOfObjectsToCopy",
                        "description": "Count the total number of objects (tables etc.) required to be copied in this run.",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "MetadataDrivenCopyTaskForProduct_adz_ControlDS",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "CopyBatchesOfObjectsSequentially",
                        "description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "GetSumOfObjectsToCopy",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "CopyObjectsInOneBatch",
                                    "description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "MetadataDrivenCopyTaskForProduct_adz_MiddleLevel",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "MaxNumberOfObjectsReturnedFromLookupActivity": {
                                                "value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
                                                "type": "Expression"
                                            },
                                            "TopLevelPipelineName": {
                                                "value": "@{pipeline().Pipeline}",
                                                "type": "Expression"
                                            },
                                            "TriggerName": {
                                                "value": "@{pipeline().TriggerName}",
                                                "type": "Expression"
                                            },
                                            "CurrentSequentialNumberOfBatch": {
                                                "value": "@item()",
                                                "type": "Expression"
                                            },
                                            "SumOfObjectsToCopy": {
                                                "value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
                                                "type": "Expression"
                                            },
                                            "SumOfObjectsToCopyForCurrentBatch": {
                                                "value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
                                                "type": "Expression"
                                            },
                                            "MainControlTableName": {
                                                "value": "@pipeline().parameters.MainControlTableName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "MaxNumberOfObjectsReturnedFromLookupActivity": {
                        "type": "Int",
                        "defaultValue": 5000
                    },
                    "MaxNumberOfConcurrentTasks": {
                        "type": "Int",
                        "defaultValue": 20
                    },
                    "MainControlTableName": {
                        "type": "String",
                        "defaultValue": "control.persondb"
                    }
                },
                "folder": {
                    "name": "Demo/MetadataDrivenCopyTaskForProduct_adz_20230119"
                },
                "annotations": [
                    "MetadataDrivenSolution"
                ],
                "lastPublishTime": "2023-09-21T14:35:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTaskForProduct_adz_ControlDS')]",
                "[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTaskForProduct_adz_MiddleLevel')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForSales_cz0_BottomLevel')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
                "activities": [
                    {
                        "name": "ListObjectsFromOneGroup",
                        "description": "List objects from one group and iterate each of them to downstream activities",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.ObjectsPerGroupToCopy",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "RouteJobsBasedOnLoadingBehavior",
                                    "description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "FullLoad",
                                                "activities": [
                                                    {
                                                        "name": "FullLoadOneObject",
                                                        "description": "Take a full snapshot on this object and copy it to the destination",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [
                                                            {
                                                                "name": "Source",
                                                                "value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
                                                            },
                                                            {
                                                                "name": "Destination",
                                                                "value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
                                                            }
                                                        ],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "@json(item().CopySourceSettings).sqlReaderQuery",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionOption": {
                                                                    "value": "@json(item().CopySourceSettings).partitionOption",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionSettings": {
                                                                    "partitionColumnName": {
                                                                        "value": "@json(item().CopySourceSettings).partitionColumnName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionUpperBound": {
                                                                        "value": "@json(item().CopySourceSettings).partitionUpperBound",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionLowerBound": {
                                                                        "value": "@json(item().CopySourceSettings).partitionLowerBound",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionNames": "@json(item().CopySourceSettings).partitionNames"
                                                                }
                                                            },
                                                            "sink": {
                                                                "type": "DelimitedTextSink",
                                                                "storeSettings": {
                                                                    "type": "AzureBlobFSWriteSettings"
                                                                },
                                                                "formatSettings": {
                                                                    "type": "DelimitedTextWriteSettings",
                                                                    "quoteAllText": true,
                                                                    "fileExtension": ".txt"
                                                                }
                                                            },
                                                            "enableStaging": false,
                                                            "validateDataConsistency": false,
                                                            "translator": {
                                                                "value": "@json(item().CopyActivitySettings).translator",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "MetadataDrivenCopyTaskForSales_cz0_SourceDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_schema": {
                                                                        "value": "@json(item().SourceObjectSettings).schema",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_table": {
                                                                        "value": "@json(item().SourceObjectSettings).table",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "MetadataDrivenCopyTaskForSales_cz0_DestinationDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_fileName": {
                                                                        "value": "@json(item().SinkObjectSettings).fileName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_folderPath": {
                                                                        "value": "@json(item().SinkObjectSettings).folderPath",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_fileSystem": {
                                                                        "value": "@json(item().SinkObjectSettings).fileSystem",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "DeltaLoad",
                                                "activities": [
                                                    {
                                                        "name": "GetMaxWatermarkValue",
                                                        "description": "Query the source object to get the max value from watermark column",
                                                        "type": "Lookup",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "select max([@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}]) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionOption": "None"
                                                            },
                                                            "dataset": {
                                                                "referenceName": "MetadataDrivenCopyTaskForSales_cz0_SourceDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_schema": {
                                                                        "value": "@json(item().SourceObjectSettings).schema",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_table": {
                                                                        "value": "@json(item().SourceObjectSettings).table",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "DeltaLoadOneObject",
                                                        "description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
                                                        "type": "Copy",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "GetMaxWatermarkValue",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [
                                                            {
                                                                "name": "Source",
                                                                "value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
                                                            },
                                                            {
                                                                "name": "Destination",
                                                                "value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
                                                            }
                                                        ],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}] \n    where [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] > @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, \n    concat('''', json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, ''''))}\n    and [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] <= @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, \n    concat('''', activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, ''''))}",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionOption": {
                                                                    "value": "@json(item().CopySourceSettings).partitionOption",
                                                                    "type": "Expression"
                                                                },
                                                                "partitionSettings": {
                                                                    "partitionColumnName": {
                                                                        "value": "@json(item().CopySourceSettings).partitionColumnName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionUpperBound": {
                                                                        "value": "@json(item().CopySourceSettings).partitionUpperBound",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionLowerBound": {
                                                                        "value": "@json(item().CopySourceSettings).partitionLowerBound",
                                                                        "type": "Expression"
                                                                    },
                                                                    "partitionNames": "@json(item().CopySourceSettings).partitionNames"
                                                                }
                                                            },
                                                            "sink": {
                                                                "type": "DelimitedTextSink",
                                                                "storeSettings": {
                                                                    "type": "AzureBlobFSWriteSettings"
                                                                },
                                                                "formatSettings": {
                                                                    "type": "DelimitedTextWriteSettings",
                                                                    "quoteAllText": true,
                                                                    "fileExtension": ".txt"
                                                                }
                                                            },
                                                            "enableStaging": false,
                                                            "validateDataConsistency": false,
                                                            "translator": {
                                                                "value": "@json(item().CopyActivitySettings).translator",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "MetadataDrivenCopyTaskForSales_cz0_SourceDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_schema": {
                                                                        "value": "@json(item().SourceObjectSettings).schema",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_table": {
                                                                        "value": "@json(item().SourceObjectSettings).table",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "MetadataDrivenCopyTaskForSales_cz0_DestinationDS",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "cw_fileName": {
                                                                        "value": "@{json(item().SinkObjectSettings).fileName}-@{json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue}-@{activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue}",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_folderPath": {
                                                                        "value": "@json(item().SinkObjectSettings).folderPath",
                                                                        "type": "Expression"
                                                                    },
                                                                    "cw_fileSystem": {
                                                                        "value": "@json(item().SinkObjectSettings).fileSystem",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "name": "UpdateWatermarkColumnValue",
                                                        "type": "SqlServerStoredProcedure",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "DeltaLoadOneObject",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "storedProcedureName": "[[control].[UpdateWatermarkColumnValue_cz0]",
                                                            "storedProcedureParameters": {
                                                                "Id": {
                                                                    "value": {
                                                                        "value": "@item().Id",
                                                                        "type": "Expression"
                                                                    },
                                                                    "type": "Int32"
                                                                },
                                                                "watermarkColumnStartValue": {
                                                                    "value": {
                                                                        "value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
                                                                        "type": "Expression"
                                                                    },
                                                                    "type": "String"
                                                                }
                                                            }
                                                        },
                                                        "linkedServiceName": {
                                                            "referenceName": "metadataDB",
                                                            "type": "LinkedServiceReference"
                                                        }
                                                    }
                                                ]
                                            }
                                        ],
                                        "defaultActivities": [
                                            {
                                                "name": "DefaultFullLoadOneObject",
                                                "description": "Take a full snapshot on this object and copy it to the destination",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [
                                                    {
                                                        "name": "Source",
                                                        "value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
                                                    },
                                                    {
                                                        "name": "Destination",
                                                        "value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
                                                    }
                                                ],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "SqlServerSource",
                                                        "sqlReaderQuery": {
                                                            "value": "@json(item().CopySourceSettings).sqlReaderQuery",
                                                            "type": "Expression"
                                                        },
                                                        "partitionOption": {
                                                            "value": "@json(item().CopySourceSettings).partitionOption",
                                                            "type": "Expression"
                                                        },
                                                        "partitionSettings": {
                                                            "partitionColumnName": {
                                                                "value": "@json(item().CopySourceSettings).partitionColumnName",
                                                                "type": "Expression"
                                                            },
                                                            "partitionUpperBound": {
                                                                "value": "@json(item().CopySourceSettings).partitionUpperBound",
                                                                "type": "Expression"
                                                            },
                                                            "partitionLowerBound": {
                                                                "value": "@json(item().CopySourceSettings).partitionLowerBound",
                                                                "type": "Expression"
                                                            },
                                                            "partitionNames": "@json(item().CopySourceSettings).partitionNames"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "validateDataConsistency": false,
                                                    "translator": {
                                                        "value": "@json(item().CopyActivitySettings).translator",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "MetadataDrivenCopyTaskForSales_cz0_SourceDS",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "cw_schema": {
                                                                "value": "@json(item().SourceObjectSettings).schema",
                                                                "type": "Expression"
                                                            },
                                                            "cw_table": {
                                                                "value": "@json(item().SourceObjectSettings).table",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "MetadataDrivenCopyTaskForSales_cz0_DestinationDS",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "cw_fileName": {
                                                                "value": "@json(item().SinkObjectSettings).fileName",
                                                                "type": "Expression"
                                                            },
                                                            "cw_folderPath": {
                                                                "value": "@json(item().SinkObjectSettings).folderPath",
                                                                "type": "Expression"
                                                            },
                                                            "cw_fileSystem": {
                                                                "value": "@json(item().SinkObjectSettings).fileSystem",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "ObjectsPerGroupToCopy": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Demo/MetadataDrivenCopyTaskForSales_cz0_20230119"
                },
                "annotations": [],
                "lastPublishTime": "2023-09-21T14:35:22Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTaskForSales_cz0_SourceDS')]",
                "[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTaskForSales_cz0_DestinationDS')]",
                "[concat(variables('factoryId'), '/linkedServices/metadataDB')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForSales_cz0_MiddleLevel')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
                "activities": [
                    {
                        "name": "DivideOneBatchIntoMultipleGroups",
                        "description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 50,
                            "activities": [
                                {
                                    "name": "GetObjectsPerGroupToCopy",
                                    "description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "MetadataDrivenCopyTaskForSales_cz0_ControlDS",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "CopyObjectsInOneGroup",
                                    "description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "GetObjectsPerGroupToCopy",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "MetadataDrivenCopyTaskForSales_cz0_BottomLevel",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "ObjectsPerGroupToCopy": {
                                                "value": "@activity('GetObjectsPerGroupToCopy').output.value",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "MaxNumberOfObjectsReturnedFromLookupActivity": {
                        "type": "Int"
                    },
                    "TopLevelPipelineName": {
                        "type": "String"
                    },
                    "TriggerName": {
                        "type": "String"
                    },
                    "CurrentSequentialNumberOfBatch": {
                        "type": "Int"
                    },
                    "SumOfObjectsToCopy": {
                        "type": "Int"
                    },
                    "SumOfObjectsToCopyForCurrentBatch": {
                        "type": "Int"
                    },
                    "MainControlTableName": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Demo/MetadataDrivenCopyTaskForSales_cz0_20230119"
                },
                "annotations": [],
                "lastPublishTime": "2023-09-21T14:35:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTaskForSales_cz0_ControlDS')]",
                "[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTaskForSales_cz0_BottomLevel')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForSales_cz0_TopLevel')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
                "activities": [
                    {
                        "name": "GetSumOfObjectsToCopy",
                        "description": "Count the total number of objects (tables etc.) required to be copied in this run.",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "MetadataDrivenCopyTaskForSales_cz0_ControlDS",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "CopyBatchesOfObjectsSequentially",
                        "description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "GetSumOfObjectsToCopy",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "CopyObjectsInOneBatch",
                                    "description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "MetadataDrivenCopyTaskForSales_cz0_MiddleLevel",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "MaxNumberOfObjectsReturnedFromLookupActivity": {
                                                "value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
                                                "type": "Expression"
                                            },
                                            "TopLevelPipelineName": {
                                                "value": "@{pipeline().Pipeline}",
                                                "type": "Expression"
                                            },
                                            "TriggerName": {
                                                "value": "@{pipeline().TriggerName}",
                                                "type": "Expression"
                                            },
                                            "CurrentSequentialNumberOfBatch": {
                                                "value": "@item()",
                                                "type": "Expression"
                                            },
                                            "SumOfObjectsToCopy": {
                                                "value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
                                                "type": "Expression"
                                            },
                                            "SumOfObjectsToCopyForCurrentBatch": {
                                                "value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
                                                "type": "Expression"
                                            },
                                            "MainControlTableName": {
                                                "value": "@pipeline().parameters.MainControlTableName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "MaxNumberOfObjectsReturnedFromLookupActivity": {
                        "type": "Int",
                        "defaultValue": 5000
                    },
                    "MaxNumberOfConcurrentTasks": {
                        "type": "Int",
                        "defaultValue": 20
                    },
                    "MainControlTableName": {
                        "type": "String",
                        "defaultValue": "control.salesdb"
                    }
                },
                "folder": {
                    "name": "Demo/MetadataDrivenCopyTaskForSales_cz0_20230119"
                },
                "annotations": [
                    "MetadataDrivenSolution"
                ],
                "lastPublishTime": "2023-09-21T14:35:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTaskForSales_cz0_ControlDS')]",
                "[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTaskForSales_cz0_MiddleLevel')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/RestResource')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RestServiceCosmos",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Demo"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "dbs/Adress/colls/Adress/docs"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RestServiceCosmos')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForProduct_adz_SourceDS')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSQLDBAdventureWorks",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "cw_schema": {
                        "type": "String"
                    },
                    "cw_table": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "MetadataDrivenCopyTaskForProduct_adz_20230119"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().cw_schema",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().cw_table",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSQLDBAdventureWorks')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForProduct_adz_ControlDS')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "metadataDB",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "MetadataDrivenCopyTaskForProduct_adz_20230119"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "control",
                    "table": "persondb"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/metadataDB')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForSales_cz0_ControlDS')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "metadataDB",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "MetadataDrivenCopyTaskForSales_cz0_20230119"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "control",
                    "table": "salesdb"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/metadataDB')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/DestinationDataset_HR')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ADLS",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Demo"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "raw/hr",
                        "fileSystem": "bronze"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/ADLS')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/SourceDataset_HR')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ADLS",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Demo"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": "hrfiles"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "BusinessEntityID",
                        "type": "String"
                    },
                    {
                        "name": "NationalIDNumber",
                        "type": "String"
                    },
                    {
                        "name": "LoginID",
                        "type": "String"
                    },
                    {
                        "name": "OrganizationNode",
                        "type": "String"
                    },
                    {
                        "name": "OrganizationLevel",
                        "type": "String"
                    },
                    {
                        "name": "JobTitle",
                        "type": "String"
                    },
                    {
                        "name": "BirthDate",
                        "type": "String"
                    },
                    {
                        "name": "MaritalStatus",
                        "type": "String"
                    },
                    {
                        "name": "Gender",
                        "type": "String"
                    },
                    {
                        "name": "HireDate",
                        "type": "String"
                    },
                    {
                        "name": "SalariedFlag",
                        "type": "String"
                    },
                    {
                        "name": "VacationHours",
                        "type": "String"
                    },
                    {
                        "name": "SickLeaveHours",
                        "type": "String"
                    },
                    {
                        "name": "CurrentFlag",
                        "type": "String"
                    },
                    {
                        "name": "rowguid",
                        "type": "String"
                    },
                    {
                        "name": "ModifiedDate",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/ADLS')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/AddressJson')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ADLS",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Demo"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "address.json",
                        "folderPath": "raw/address",
                        "fileSystem": "bronze"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/ADLS')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForSales_cz0_DestinationDS')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ADLS",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "cw_fileName": {
                        "type": "String"
                    },
                    "cw_folderPath": {
                        "type": "String"
                    },
                    "cw_fileSystem": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "MetadataDrivenCopyTaskForSales_cz0_20230119"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().cw_fileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().cw_folderPath",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().cw_fileSystem",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/ADLS')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForProduct_adz_DestinationDS')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ADLS",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "cw_columnDelimiter": {
                        "type": "String"
                    },
                    "cw_escapeChar": {
                        "type": "String"
                    },
                    "cw_quoteChar": {
                        "type": "String"
                    },
                    "cw_firstRowAsHeader": {
                        "type": "Bool"
                    },
                    "cw_fileName": {
                        "type": "String"
                    },
                    "cw_folderPath": {
                        "type": "String"
                    },
                    "cw_fileSystem": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "MetadataDrivenCopyTaskForProduct_adz_20230119"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().cw_fileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().cw_folderPath",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().cw_fileSystem",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": {
                        "value": "@dataset().cw_columnDelimiter",
                        "type": "Expression"
                    },
                    "escapeChar": {
                        "value": "@dataset().cw_escapeChar",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": {
                        "value": "@dataset().cw_firstRowAsHeader",
                        "type": "Expression"
                    },
                    "quoteChar": {
                        "value": "@dataset().cw_quoteChar",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/ADLS')]"
            ]
        },
        {
            "name": "[concat(variables('factoryName'), '/MetadataDrivenCopyTaskForSales_cz0_SourceDS')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SqlServerOnVM",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "cw_schema": {
                        "type": "String"
                    },
                    "cw_table": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "MetadataDrivenCopyTaskForSales_cz0_20230119"
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().cw_schema",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().cw_table",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/SqlServerOnVM')]"
            ]
        }
		]
		}
